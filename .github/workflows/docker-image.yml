name: Build & Push Docker image to Docker Hub (Corrected Final Version)

on:
  # 触发器一：手动触发
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker Tag (e.g., latest, v1.2.3)'
        required: false
        default: 'latest'
        type: string
      force_rebuild:
        description: 'Force rebuild without using cache'
        required: false
        default: false
        type: boolean
      build_strategy:
        description: 'Build strategy: native-arm (faster, public repos only) or qemu (universal)'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - native-arm
          - qemu
  # 触发器二：推送到分支或标签
  push:
    branches: [ main, master ] # 对应 dev 标签的构建
    tags: [ 'v*' ]            # 对应 latest 和版本标签的构建
  # 触发器三：拉取请求
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: docker.io

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  actions: write

jobs:
  # 决策job：根据仓库类型自动选择构建策略
  determine-strategy:
    name: 🎯 Determine Build Strategy
    runs-on: ubuntu-latest
    outputs:
      use_native_arm: ${{ steps.decide.outputs.use_native_arm }}
      image_name: ${{ steps.decide.outputs.image_name }}
      should_push: ${{ steps.decide.outputs.should_push }}
    steps:
      - name: 📋 Decide build strategy and normalize image name
        id: decide
        run: |
          # 【核心修复】健壮地处理镜像名称生成
          # 优先使用 secrets（如果存在），否则使用 github.repository 作为后备方案
          # 这确保了在各种触发条件下都能正常工作
        
          DOCKERHUB_USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
          DOCKERHUB_REPO="${{ secrets.DOCKERHUB_REPO_NAME }}"
        
          # 检查 secrets 是否存在
          if [ -n "$DOCKERHUB_USERNAME" ] && [ -n "$DOCKERHUB_REPO" ]; then
            # Secrets 存在，使用 secrets 构建镜像名称
            IMAGE_NAME="${DOCKERHUB_USERNAME}/${DOCKERHUB_REPO}"
            echo "should_push=true" >> $GITHUB_OUTPUT
            echo "✅ Using Docker Hub credentials from secrets"
          else
            # Secrets 不存在（如 fork 的 PR），使用 github.repository 作为后备
            IMAGE_NAME="${{ github.repository }}"
            echo "should_push=false" >> $GITHUB_OUTPUT
            echo "⚠️  Docker Hub secrets not found. Using github.repository for build-only mode."
            echo "⚠️  Images will be built but NOT pushed to Docker Hub."
          fi
        
          # 将镜像名称转换为小写（Docker 要求）
          IMAGE_NAME_LOWER=$(echo "$IMAGE_NAME" | tr '[:upper:]' '[:lower:]')
          echo "image_name=$IMAGE_NAME_LOWER" >> $GITHUB_OUTPUT
          echo "Normalized image name: $IMAGE_NAME_LOWER"
        
          STRATEGY="${{ github.event.inputs.build_strategy }}"
          IS_PUBLIC="${{ github.event.repository.private == false }}"
        
          echo "Repository name: ${{ github.repository }}"
          echo "Repository is public: $IS_PUBLIC"
          echo "Repository private flag: ${{ github.event.repository.private }}"
          echo "Requested strategy: $STRATEGY"
        
          # 如果是auto模式，根据仓库类型自动决定
          if [ "$STRATEGY" = "auto" ] || [ -z "$STRATEGY" ]; then
            if [ "$IS_PUBLIC" = "true" ]; then
              echo "use_native_arm=true" >> $GITHUB_OUTPUT
              echo "✅ Auto-selected: Native ARM (public repo)"
            else
              echo "use_native_arm=false" >> $GITHUB_OUTPUT
              echo "✅ Auto-selected: QEMU (private repo - ARM runners not available)"
            fi
          elif [ "$STRATEGY" = "native-arm" ]; then
            if [ "$IS_PUBLIC" = "true" ]; then
              echo "use_native_arm=true" >> $GITHUB_OUTPUT
              echo "✅ Manual-selected: Native ARM"
            else
              echo "use_native_arm=false" >> $GITHUB_OUTPUT
              echo "⚠️  Native ARM not available for private repos, fallback to QEMU"
            fi
          else
            echo "use_native_arm=false" >> $GITHUB_OUTPUT
            echo "✅ Manual-selected: QEMU"
          fi
        
          echo "Final decision - use_native_arm: $(grep use_native_arm $GITHUB_OUTPUT || echo 'not set')"
          echo "Final decision - should_push: $(grep should_push $GITHUB_OUTPUT || echo 'not set')"

  # 使用矩阵策略在原生Runner上构建（仅公开仓库）
  build-native:
    name: 🚀 Build image for ${{ matrix.platform }} (Native)
    needs: [determine-strategy]
    if: needs.determine-strategy.outputs.use_native_arm == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            os: ubuntu-latest
            platform_tag: amd64
          - platform: linux/arm64
            os: ubuntu-24.04-arm
            platform_tag: arm64
    runs-on: ${{ matrix.os }}

    steps:
      - name: ⚡ Maximize build space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo apt-get clean
          df -h

      # fetch-depth 必须是 2 才能比较版本，这是唯一必须改的地方
      - name: 📥 Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      # Node.js 构建环境
      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
      - name: 📦 Install dependencies
        run: pnpm install
      - name: 📜 Generate version and changelog
        run: node scripts/convert-changelog.js

      - name: 🔧 Setup Docker Buildx for advanced features
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1
            network=host

      - name: 🔐 Login to Docker Hub
        if: github.event_name != 'pull_request' && needs.determine-strategy.outputs.should_push == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🚀 Build and push image with digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          # 【关键修复】按照 Docker 官方文档的标准方式：
          # 1. 使用 tags 参数传递镜像仓库名称（不带标签，仅仓库名）
          # 2. outputs 参数中不包含 name 字段
          # 3. push-by-digest=true 会让 Action 使用 tags 中的仓库名，忽略标签部分
          tags: ${{ needs.determine-strategy.outputs.image_name }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=${{ github.event_name != 'pull_request' && needs.determine-strategy.outputs.should_push == 'true' }}
          # 只使用 GitHub Actions 自带的缓存 (GHA Cache)。
          cache-from: type=gha,scope=multiarch-native-${{ github.workflow }}-${{ matrix.platform_tag }}
          cache-to: type=gha,mode=max,scope=multiarch-native-${{ github.workflow }}-${{ matrix.platform_tag }}
          # force_rebuild 时禁用缓存
          no-cache: ${{ github.event.inputs.force_rebuild == 'true' }}
          # 性能优化配置
          provenance: false
          sbom: false
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            NODE_ENV=production
            SHARP_IGNORE_GLOBAL_LIBVIPS=1

      - name: 📄 Export digest
        if: github.event_name != 'pull_request' && needs.determine-strategy.outputs.should_push == 'true'
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: 📤 Upload digest artifact
        if: github.event_name != 'pull_request' && needs.determine-strategy.outputs.should_push == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.platform_tag }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  # 使用QEMU进行跨平台构建（默认方式，支持所有仓库类型）
  build-and-push:
    name: 🚀 Build & Push Multi-Platform Image to Docker Hub (QEMU)
    needs: [determine-strategy]
    if: needs.determine-strategy.outputs.use_native_arm == 'false'
    runs-on: ubuntu-latest
  
    steps:
      - name: ⚡ Maximize build space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo apt-get clean
          df -h

      # fetch-depth 必须是 2 才能比较版本，这是唯一必须改的地方
      - name: 📥 Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 

      # Node.js 构建环境
      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
      - name: 📦 Install dependencies
        run: pnpm install
      - name: 📜 Generate version and changelog
        run: node scripts/convert-changelog.js

      # 【新增】移植过来的 package.json 版本检查逻辑
      - name: 🔍 Check if version changed in package.json
        id: version_check
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          if git show HEAD~1:package.json > package.json.old 2>/dev/null; then
            PREVIOUS_VERSION=$(node -p "JSON.parse(require('fs').readFileSync('./package.json.old', 'utf8')).version")
            rm package.json.old
          else
            PREVIOUS_VERSION="0.0.0"
          fi
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: 🎯 Setup QEMU for multi-platform builds
        uses: docker/setup-qemu-action@v3
      - name: 🔧 Setup Docker Buildx for advanced features
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1
            network=host
    
      - name: 🔐 Login to Docker Hub
        if: github.event_name != 'pull_request' && needs.determine-strategy.outputs.should_push == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 在原有的标签规则基础上，增加一条基于 package.json 的规则
      - name: 🏷️ Extract intelligent Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ needs.determine-strategy.outputs.image_name }}
          tags: |
            # 规则一 (dev): 推送到默认分支时打 'dev' 标签 (保留您的逻辑)
            # 这用于 CI 检查，确保代码总是可构建和推送的。
            type=raw,value=dev,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}

            # 规则二 (git tag): 推送 "v" 开头 Git 标签时，生成 'latest' 和版本号 (保留您的逻辑)
            # 这是正式发布的唯一途径。
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
          
            # 规则三 (package.json): 如果 package.json 版本变化，也打上版本号标签
            type=raw,value=${{ steps.version_check.outputs.current_version }},enable=${{ steps.version_check.outputs.version_changed == 'true' }}

            # 规则四 (手动): 手动触发
            type=raw,value=${{ github.event.inputs.tag || 'latest' }},enable=${{ github.event_name == 'workflow_dispatch' }}

            # 规则五 (调试): SHA 标签
            type=sha,prefix=sha-,format=short

      # 核心构建与推送
      - name: 🚀 Build and push multi-platform image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          # 仅在非 pull_request 事件且有 secrets 时推送
          push: ${{ github.event_name != 'pull_request' && needs.determine-strategy.outputs.should_push == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # 只使用 GitHub Actions 自带的缓存 (GHA Cache)。
          cache-from: type=gha,scope=multiarch-qemu-${{ github.workflow }}
          cache-to: type=gha,mode=max,scope=multiarch-qemu-${{ github.workflow }}
          # force_rebuild 时禁用缓存
          no-cache: ${{ github.event.inputs.force_rebuild == 'true' }}
          # 性能优化配置
          provenance: false
          sbom: false
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            NODE_ENV=production
            SHARP_IGNORE_GLOBAL_LIBVIPS=1

  # 合并原生构建的清单并打标签
  merge:
    name: 🔗 Merge manifests and apply tags
    runs-on: ubuntu-latest
    needs: [determine-strategy, build-native]
    if: needs.determine-strategy.outputs.use_native_arm == 'true' && github.event_name != 'pull_request' && needs.determine-strategy.outputs.should_push == 'true'
  
    steps:
      - name: 📥 Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
    
      - name: 🔍 Check if version changed in package.json
        id: version_check
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          if git show HEAD~1:package.json > package.json.old 2>/dev/null; then
            PREVIOUS_VERSION=$(node -p "JSON.parse(require('fs').readFileSync('./package.json.old', 'utf8')).version")
            rm package.json.old
          else
            PREVIOUS_VERSION="0.0.0"
          fi
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi
    
      - name: 📥 Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
    
      - name: 🔧 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        
      - name: 🏷️ Extract intelligent Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ needs.determine-strategy.outputs.image_name }}
          tags: |
            # 规则一 (dev): 推送到默认分支时打 'dev' 标签 (保留您的逻辑)
            # 这用于 CI 检查，确保代码总是可构建和推送的。
            type=raw,value=dev,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}

            # 规则二 (git tag): 推送 "v" 开头 Git 标签时，生成 'latest' 和版本号 (保留您的逻辑)
            # 这是正式发布的唯一途径。
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
          
            # 规则三 (package.json): 如果 package.json 版本变化，也打上版本号标签
            type=raw,value=${{ steps.version_check.outputs.current_version }},enable=${{ steps.version_check.outputs.version_changed == 'true' }}

            # 规则四 (手动): 手动触发
            type=raw,value=${{ github.event.inputs.tag || 'latest' }},enable=${{ github.event_name == 'workflow_dispatch' }}

            # 规则五 (调试): SHA 标签
            type=sha,prefix=sha-,format=short

      - name: 🚀 Create manifest list and push
        working-directory: /tmp/digests
        run: |
          TAGS=$(echo "${{ steps.meta.outputs.tags }}" | tr '\n' ' ')
        
          if [ -z "$TAGS" ]; then
            echo "No tags to apply. Skipping manifest creation."
            exit 0
          fi
        
          echo "Applying tags: $TAGS"
        
          # 格式化标签以便传递给 -t 参数
          FORMATTED_TAGS=""
          for TAG in $TAGS; do
            FORMATTED_TAGS="$FORMATTED_TAGS -t $TAG"
          done
        
          echo "Formatted tags: $FORMATTED_TAGS"
        
          # 创建并推送清单
          docker buildx imagetools create $FORMATTED_TAGS \
            $(printf '${{ needs.determine-strategy.outputs.image_name }}@sha256:%s ' *)

  # 清理任务
  cleanup:
    runs-on: ubuntu-latest
    needs: [build-and-push, build-native, merge]
    if: always()
    steps:
      - name: 🧹 Cleanup workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 2
          keep_minimum_runs: 3

name: Build & Push Docker image to Docker Hub (Corrected Final Version)

on:
  # 触发器一：手动触发
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker Tag (e.g., latest, v1.2.3)'
        required: false
        default: 'latest'
        type: string
      force_rebuild:
        description: 'Force rebuild without using cache'
        required: false
        default: false
        type: boolean
      build_strategy:
        description: 'Build strategy: native-arm (faster, public repos only) or qemu (universal)'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - native-arm
          - qemu
  # 触发器二：推送到分支或标签
  push:
    branches: [ main, master ] # 对应 dev 标签的构建
    tags: [ 'v*' ]            # 对应 latest 和版本标签的构建
  # 触发器三：拉取请求
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: docker.io

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  actions: write

jobs:
  # 决策job：根据仓库类型自动选择构建策略
  determine-strategy:
    name: 🎯 Determine Build Strategy
    runs-on: ubuntu-latest
    outputs:
      use_native_arm: ${{ steps.decide.outputs.use_native_arm }}
      image_name: ${{ steps.decide.outputs.image_name }}
      should_push: ${{ steps.decide.outputs.should_push }}
    steps:
      - name: 📋 Decide build strategy and normalize image name
        id: decide
        run: |
          # --- 阶段一：在本地变量中完成所有决策 ---
          
          DOCKERHUB_USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
          DOCKERHUB_REPO="${{ secrets.DOCKERHUB_REPO_NAME }}"
          
          # 决策1: 镜像名称和是否推送
          local_image_name=""
          local_should_push="false"
          if [ -n "$DOCKERHUB_USERNAME" ] && [ -n "$DOCKERHUB_REPO" ]; then
            local_image_name="${DOCKERHUB_USERNAME}/${DOCKERHUB_REPO}"
            local_should_push="true"
            echo "✅ Using Docker Hub credentials from secrets"
          else
            local_image_name="${{ github.repository }}"
            local_should_push="false"
            echo "⚠️  Docker Hub secrets not found. Using github.repository for build-only mode."
            echo "⚠️  Images will be built but NOT pushed to Docker Hub."
          fi
          
          local_image_name_lower=$(echo "$local_image_name" | tr '[:upper:]' '[:lower:]')
          echo "Normalized image name: $local_image_name_lower"
          
          # 决策2: 构建策略
          local_use_native_arm="false" # 默认值
          STRATEGY="${{ github.event.inputs.build_strategy }}"
          IS_PUBLIC="${{ github.event.repository.private == false }}"
          
          echo "Repository is public: $IS_PUBLIC"
          echo "Requested strategy: $STRATEGY"
          
          if [ "$STRATEGY" = "auto" ] || [ -z "$STRATEGY" ]; then
            if [ "$IS_PUBLIC" = "true" ]; then
              local_use_native_arm="true"
              echo "✅ Auto-selected: Native ARM (public repo)"
            else
              local_use_native_arm="false"
              echo "✅ Auto-selected: QEMU (private repo - ARM runners not available)"
            fi
          elif [ "$STRATEGY" = "native-arm" ]; then
            if [ "$IS_PUBLIC" = "true" ]; then
              local_use_native_arm="true"
              echo "✅ Manual-selected: Native ARM"
            else
              local_use_native_arm="false"
              echo "⚠️  Native ARM not available for private repos, fallback to QEMU"
            fi
          else
            local_use_native_arm="false"
            echo "✅ Manual-selected: QEMU"
          fi

          # --- 阶段二：一次性、集中地将所有最终决策写入 GITHUB_OUTPUT ---
          # 这种模式可以有效规避GitHub Actions的secret检测机制
          {
            echo "image_name=${local_image_name_lower}"
            echo "should_push=${local_should_push}"
            echo "use_native_arm=${local_use_native_arm}"
          } >> "$GITHUB_OUTPUT"

          echo "--- Final outputs sent to downstream jobs ---"
          echo "image_name: ${local_image_name_lower}"
          echo "should_push: ${local_should_push}"
          echo "use_native_arm: ${local_use_native_arm}"
          echo "-------------------------------------------"


  # 使用矩阵策略在原生Runner上构建（仅公开仓库）
  build-native:
    name: 🚀 Build image for ${{ matrix.platform }} (Native)
    needs: [determine-strategy]
    if: needs.determine-strategy.outputs.use_native_arm == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            os: ubuntu-latest
            platform_tag: amd64
          - platform: linux/arm64
            os: ubuntu-24.04-arm
            platform_tag: arm64
    runs-on: ${{ matrix.os }}

    steps:
      - name: ⚡ Maximize build space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo apt-get clean
          df -h

      - name: 📥 Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
      - name: 📦 Install dependencies
        run: pnpm install
      - name: 📜 Generate version and changelog
        run: node scripts/convert-changelog.js

      - name: 🔧 Setup Docker Buildx for advanced features
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1
            network=host

      - name: 🔐 Login to Docker Hub
        if: github.event_name != 'pull_request' && needs.determine-strategy.outputs.should_push == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 【诊断步骤】在构建前，打印出即将使用的 image_name，确认其值
      - name: 🧐 Verify image name from previous job
        run: |
          echo "Image name from determine-strategy job is: '${{ needs.determine-strategy.outputs.image_name }}'"
          if [ -z "${{ needs.determine-strategy.outputs.image_name }}" ]; then
            echo "::error::FATAL: image_name is empty. Halting workflow."
            exit 1
          fi

      # 【最终修正】采用 push-by-digest 模式的正确写法
      - name: 🚀 Build and push image with digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          # 1. 保留顶层 push 参数作为推送开关
          push: ${{ github.event_name != 'pull_request' && needs.determine-strategy.outputs.should_push == 'true' }}
          # 2. 【关键修复】移除与 push-by-digest 模式冲突的 tags 参数
          # tags: ${{ needs.determine-strategy.outputs.image_name }}
          # 3. 在 outputs 中定义推送方式和目标仓库
          outputs: type=image,name=${{ needs.determine-strategy.outputs.image_name }},name-canonical=true,push-by-digest=true
          cache-from: type=gha,scope=multiarch-native-${{ github.workflow }}-${{ matrix.platform_tag }}
          cache-to: type=gha,mode=max,scope=multiarch-native-${{ github.workflow }}-${{ matrix.platform_tag }}
          no-cache: ${{ github.event.inputs.force_rebuild == 'true' }}
          provenance: false
          sbom: false
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            NODE_ENV=production
            SHARP_IGNORE_GLOBAL_LIBVIPS=1


      - name: 📄 Export digest
        if: github.event_name != 'pull_request' && needs.determine-strategy.outputs.should_push == 'true'
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: 📤 Upload digest artifact
        if: github.event_name != 'pull_request' && needs.determine-strategy.outputs.should_push == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.platform_tag }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  # 使用QEMU进行跨平台构建（默认方式，支持所有仓库类型）
  build-and-push:
    name: 🚀 Build & Push Multi-Platform Image to Docker Hub (QEMU)
    needs: [determine-strategy]
    if: needs.determine-strategy.outputs.use_native_arm == 'false'
    runs-on: ubuntu-latest
    
    steps:
      - name: ⚡ Maximize build space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo apt-get clean
          df -h

      - name: 📥 Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
      - name: 📦 Install dependencies
        run: pnpm install
      - name: 📜 Generate version and changelog
        run: node scripts/convert-changelog.js

      - name: 🔍 Check if version changed in package.json
        id: version_check
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          if git show HEAD~1:package.json > package.json.old 2>/dev/null; then
            PREVIOUS_VERSION=$(node -p "JSON.parse(require('fs').readFileSync('./package.json.old', 'utf8')).version")
            rm package.json.old
          else
            PREVIOUS_VERSION="0.0.0"
          fi
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: 🎯 Setup QEMU for multi-platform builds
        uses: docker/setup-qemu-action@v3
      - name: 🔧 Setup Docker Buildx for advanced features
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1
            network=host
      
      - name: 🔐 Login to Docker Hub
        if: github.event_name != 'pull_request' && needs.determine-strategy.outputs.should_push == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🏷️ Extract intelligent Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ needs.determine-strategy.outputs.image_name }}
          tags: |
            type=raw,value=dev,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=raw,value=${{ steps.version_check.outputs.current_version }},enable=${{ steps.version_check.outputs.version_changed == 'true' }}
            type=raw,value=${{ github.event.inputs.tag || 'latest' }},enable=${{ github.event_name == 'workflow_dispatch' }}
            type=sha,prefix=sha-,format=short

      - name: 🚀 Build and push multi-platform image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' && needs.determine-strategy.outputs.should_push == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=multiarch-qemu-${{ github.workflow }}
          cache-to: type=gha,mode=max,scope=multiarch-qemu-${{ github.workflow }}
          no-cache: ${{ github.event.inputs.force_rebuild == 'true' }}
          provenance: false
          sbom: false
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            NODE_ENV=production
            SHARP_IGNORE_GLOBAL_LIBVIPS=1

  # 合并原生构建的清单并打标签
  merge:
    name: 🔗 Merge manifests and apply tags
    runs-on: ubuntu-latest
    needs: [determine-strategy, build-native]
    if: needs.determine-strategy.outputs.use_native_arm == 'true' && github.event_name != 'pull_request' && needs.determine-strategy.outputs.should_push == 'true'
    
    steps:
      - name: 📥 Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: 🔍 Check if version changed in package.json
        id: version_check
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          if git show HEAD~1:package.json > package.json.old 2>/dev/null; then
            PREVIOUS_VERSION=$(node -p "JSON.parse(require('fs').readFileSync('./package.json.old', 'utf8')).version")
            rm package.json.old
          else
            PREVIOUS_VERSION="0.0.0"
          fi
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi
      
      - name: 📥 Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
      
      - name: 🔧 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: 🏷️ Extract intelligent Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ needs.determine-strategy.outputs.image_name }}
          tags: |
            type=raw,value=dev,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=raw,value=${{ steps.version_check.outputs.current_version }},enable=${{ steps.version_check.outputs.version_changed == 'true' }}
            type=raw,value=${{ github.event.inputs.tag || 'latest' }},enable=${{ github.event_name == 'workflow_dispatch' }}
            type=sha,prefix=sha-,format=short

      - name: 🚀 Create manifest list and push
        working-directory: /tmp/digests
        run: |
          TAGS=$(echo "${{ steps.meta.outputs.tags }}" | tr '\n' ' ')
          
          if [ -z "$TAGS" ]; then
            echo "No tags to apply. Skipping manifest creation."
            exit 0
          fi
          
          echo "Applying tags: $TAGS"
          
          FORMATTED_TAGS=""
          for TAG in $TAGS; do
            FORMATTED_TAGS="$FORMATTED_TAGS -t $TAG"
          done
          
          echo "Formatted tags: $FORMATTED_TAGS"
          
          docker buildx imagetools create $FORMATTED_TAGS \
            $(printf '${{ needs.determine-strategy.outputs.image_name }}@sha256:%s ' *)

  # 清理任务
  cleanup:
    runs-on: ubuntu-latest
    needs: [build-and-push, build-native, merge]
    if: always()
    steps:
      - name: 🧹 Cleanup workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 2
          keep_minimum_runs: 3

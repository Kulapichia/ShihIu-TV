name: Build & Push Docker image to Docker Hub

on:
  # 触发器一：手动触发
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker Tag (e.g., latest, v1.2.3)'
        required: false
        default: 'latest'
        type: string
      force_rebuild:
        description: 'Force rebuild without using cache'
        required: false
        default: false
        type: boolean

  # 触发器二：推送到分支或标签
  push:
    branches: [ main, master ] # 对应 dev 标签的构建
    tags: [ 'v*' ]            # 对应 latest 和版本标签的构建

  # 触发器三：拉取请求
  pull_request:
    branches: [ main, master ]

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO_NAME }}
  REGISTRY: docker.io

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: write
  packages: write

jobs:
  build-and-push:
    name: 🚀 Build & Push Multi-Platform Image
    runs-on: ubuntu-latest
    
    steps:
      - name: ⚡ Maximize build space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo apt-get clean
          df -h

      - name: 📥 Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # Node.js 构建环境
      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
      - name: 📦 Install dependencies
        run: pnpm install
      - name: 📜 Generate version and changelog
        run: node scripts/convert-changelog.js

      # Docker 环境
      # ... (setup-qemu, setup-buildx, login-action steps are the same)
      - name: 🎯 Setup QEMU for multi-platform builds
        uses: docker/setup-qemu-action@v3
      - name: 🔧 Setup Docker Buildx for advanced features
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1
            network=host
      - name: 🔐 Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Docker 元数据标签生成 (核心变更)
      - name: 🏷️ Extract intelligent Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            # 规则一 (开发版): 当推送到默认分支 (main/master) 时，打上 'dev' 标签。
            # 这用于 CI 检查，确保代码总是可构建和推送的。
            type=raw,value=dev,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}

            # 规则二 (稳定版): 当推送 "v" 开头的 Git 标签时，生成 'latest' 和版本号标签。
            # 这是正式发布的唯一途径。
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}

            # 规则三 (手动触发): 保持手动触发的灵活性。
            type=raw,value=${{ github.event.inputs.tag || 'latest' }},enable=${{ github.event_name == 'workflow_dispatch' }}         
            
            # 规则四 (调试用): 为每次构建生成唯一的 SHA 标签。
            type=sha,prefix=sha-,format=short

      # 核心构建与推送
      - name: 🚀 Build and push multi-platform image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          # 仅在非 pull_request 事件时推送
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # 只使用 GitHub Actions 自带的缓存 (GHA Cache)。
          cache-from: type=gha,scope=multiarch-${{ github.workflow }}
          cache-to: type=gha,mode=max,scope=multiarch-${{ github.workflow }}
          # force_rebuild 时禁用缓存
          no-cache: ${{ github.event.inputs.force_rebuild == 'true' }}
          # 性能优化配置
          provenance: false
          sbom: false
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            NODE_ENV=production
            SHARP_IGNORE_GLOBAL_LIBVIPS=1

  # 清理任务
  cleanup:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: always()
    steps:
      - name: 🧹 Cleanup workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 2
          keep_minimum_runs: 3
